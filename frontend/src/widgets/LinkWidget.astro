---
/**
 * @typedef {Object} LinkWidget
 * @property {'page'|'file'|'url'} linkType - Type of link
 * @property {Object} _linkPage - Page link object
 * @property {string} _linkPage._url - URL for page link
 * @property {Object} _linkFile - File link object
 * @property {string} _linkFile._url - URL for file link
 * @property {string} linkUrl - Direct URL
 * @property {string} linkText - Text to display
 * @property {'button'|'link'} linkStyle - Style of the link
 * @property {string} [buttonColor] - Button color variant
 * @property {string} [buttonStyle] - Button style variant
 * @property {string} [buttonSize] - Button size variant
 * @property {boolean} [buttonDisabled] - Disabled state
 * @property {string} [linkTarget] - Target attribute value
 * @property {string} [icon] - Icon identifier
 * @property {'left'|'right'} [iconPosition] - Icon position
 * @property {'left'|'center'|'right'} [buttonAlignment='left'] - Button alignment
 */

// Constants
const ALIGNMENT_MAP = {
  'left': 'is-justify-content-flex-start',
  'center': 'is-justify-content-center',
  'right': 'is-justify-content-flex-end'
};

const { widget } = Astro.props;

// Input validation
if (!widget?.linkType || !widget?.linkText) {
  throw new Error('Link widget requires linkType and linkText properties');
}

// Determine the link path based on type
const path = (() => {
  switch (widget.linkType) {
    case 'page':
      return widget._linkPage?.[0]?._url;
    case 'file':
      return widget._linkFile?.[0]?._url;
    default:
      return widget.linkUrl;
  }
})();

const getButtonStyle = (style) => style ? `is-${style}` : '';

// Build button classes
const isButton = widget.linkStyle === 'button';
const buttonClasses = isButton
  ? [
      'button',
      widget.buttonColor && `is-${widget.buttonColor}`,
      getButtonStyle(widget.buttonStyle),
      widget.buttonSize && `is-${widget.buttonSize}`
    ].filter(Boolean).join(' ')
  : '';

const linkTarget = widget.linkTarget?.includes('_blank') ? '_blank' : '';

// Build link attributes
const attributes = {
  target: linkTarget,
  class: isButton ? buttonClasses : 'link',
  href: path,
  ...(linkTarget === '_blank' && { rel: 'noopener noreferrer' }),
  ...(isButton && { role: 'button' }),
  ...(widget.buttonDisabled ? {
    'disabled': true,
    'aria-disabled': 'true',
    tabindex: '-1'
  } : {})
};

const hasIcon = Boolean(widget.icon);
const alignmentClass = ALIGNMENT_MAP[widget.buttonAlignment || 'left'];

// Prepare aria-label if link opens in new tab
const ariaLabel = linkTarget === '_blank'
  ? `${widget.linkText} (opens in new tab)`
  : undefined;
---

<div class={`columns ${alignmentClass} m-0`}>
  <div class="column is-narrow">
    <a {...attributes} aria-label={ariaLabel}>
      {hasIcon && widget.iconPosition !== 'right' && (
        <span class="icon" aria-hidden="true">
          <i class={`fa-solid fa-${widget.icon}`}></i>
        </span>
      )}
      <span>{widget.linkText}</span>
      {hasIcon && widget.iconPosition === 'right' && (
        <span class="icon" aria-hidden="true">
          <i class={`fa-solid fa-${widget.icon}`}></i>
        </span>
      )}
    </a>
  </div>
</div>