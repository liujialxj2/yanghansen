---
/**
 * A flexible row-based layout widget for ApostropheCMS content areas.
 * Supports multiple column configurations, spacing options, and alignment settings.
 *
 * @component
 * @param {Object} widget - The widget configuration object from ApostropheCMS
 * @param {string} [widget.columnLayout='two-equal'] - Column layout configuration:
 *   - 'single' - Full width single column
 *   - 'two-equal' - Two equal width columns
 *   - 'three-equal' - Three equal width columns
 *   - 'four-equal' - Four equal width columns
 *   - 'one-third-two-thirds' - 33% | 66% split
 *   - 'two-thirds-one-third' - 66% | 33% split
 *   - 'quarter-half-quarter' - 25% | 50% | 25% split
 * @param {string} [widget.spacing='normal'] - Space between columns ('none', 'tight', 'normal', 'wide')
 * @param {string} [widget.verticalAlignment='top'] - Vertical alignment ('top', 'center', 'bottom')
 * @param {string} [widget.horizontalAlignment='left'] - Horizontal alignment ('left', 'center', 'right', 'space-between')
 * @param {string} [widget.maxWidth] - Optional maximum width constraint ('768', '960', '1152', '1344')
 * @param {Object} widget.columnOneContent - Content for first column
 * @param {Object} [widget.columnTwoContent] - Content for second column (layout dependent)
 * @param {Object} [widget.columnThreeContent] - Content for third column (layout dependent)
 * @param {Object} [widget.columnFourContent] - Content for fourth column (layout dependent)
 */

const { widget } = Astro.props;
import AposArea from '@apostrophecms/apostrophe-astro/components/AposArea.astro';

const layouts = {
  'single': {
    classes: ['is-12'],
    areas: ['columnOneContent']
  },
  'two-equal': {
    classes: ['is-12-mobile is-6-tablet', 'is-12-mobile is-6-tablet'],
    areas: ['columnOneContent', 'columnTwoContent']
  },
  'three-equal': {
    classes: ['is-12-mobile is-6-tablet is-4-desktop', 
              'is-12-mobile is-6-tablet is-4-desktop', 
              'is-12-mobile is-6-tablet is-4-desktop'],
    areas: ['columnOneContent', 'columnTwoContent', 'columnThreeContent']
  },
  'four-equal': {
    classes: ['is-12-mobile is-6-tablet is-3-desktop',
              'is-12-mobile is-6-tablet is-3-desktop',
              'is-12-mobile is-6-tablet is-3-desktop',
              'is-12-mobile is-6-tablet is-3-desktop'],
    areas: ['columnOneContent', 'columnTwoContent', 'columnThreeContent', 'columnFourContent']
  },
  'one-third-two-thirds': {
    classes: ['is-12-mobile is-4-tablet', 'is-12-mobile is-8-tablet'],
    areas: ['columnOneContent', 'columnTwoContent']
  },
  'two-thirds-one-third': {
    classes: ['is-12-mobile is-8-tablet', 'is-12-mobile is-4-tablet'],
    areas: ['columnOneContent', 'columnTwoContent']
  },
  'quarter-half-quarter': {
    classes: ['is-12-mobile is-3-tablet',
              'is-12-mobile is-6-tablet',
              'is-12-mobile is-3-tablet'],
    areas: ['columnOneContent', 'columnTwoContent', 'columnThreeContent']
  }
};

// Spacing configurations
const spacingClasses = {
  'none': 'is-gapless',
  'tight': 'is-1',
  'normal': 'is-3',
  'wide': 'is-5'
};

// Vertical alignment configurations
const verticalAlignmentClasses = {
  'top': 'is-align-items-start',
  'center': 'is-align-items-center',
  'bottom': 'is-align-items-end'
};

// Horizontal alignment configurations
const horizontalAlignmentClasses = {
  'left': 'is-justify-content-flex-start',
  'center': 'is-justify-content-center',
  'right': 'is-justify-content-flex-end',
  'space-between': 'is-justify-content-space-between'
};

const currentLayout = layouts[widget.columnLayout || 'two-equal'];
const spacingClass = spacingClasses[widget.spacing || 'normal'];
const verticalAlignClass = verticalAlignmentClasses[widget.verticalAlignment || 'top'];
const horizontalAlignClass = horizontalAlignmentClasses[widget.horizontalAlignment || 'left'];
const maxWidth = widget.maxWidth ? widget.maxWidth : '';

// Build columns classes
const columnsClasses = [
  'columns',
  spacingClass,
  verticalAlignClass,
  horizontalAlignClass,
  maxWidth,
  'mx-auto'
].filter(Boolean).join(' ');
---

<section
  class="column-layout container is-fluid mb-6"
  role="region"
  aria-label={widget.label || 'Content columns'}
>
  <div
    class={columnsClasses}
    role="presentation"
  >
    {currentLayout.areas.map((areaName, index) => (
      widget[areaName] && (
        <div
          class={`column ${currentLayout.classes[index]} editor-column`}
          data-column-index={index + 1}
          role="region"
          aria-label={`Column ${index + 1}`}
        >
          <div class="column-content">
            <AposArea area={widget[areaName]} />
          </div>
        </div>
      )
    ))}
  </div>
</section>


<style>
.max-width-768 { max-width: 768px; }
.max-width-960 { max-width: 960px; }
.max-width-1152 { max-width: 1152px; }
.max-width-1344 { max-width: 1344px; }
</style>
