---
/**
 * A versatile card component that supports various layouts and styles.
 * @component
 * @param {Object} widget - The widget configuration object
 * @param {('basic'|'image'|'image-overlay'|'media')} [widget.cardType='basic'] - The type of card to render
 * @param {string} [widget.cardTitle] - The card's title
 * @param {string} [widget.subtitle] - The card's subtitle
 * @param {string} [widget.titleSize='is-4'] - The size class for the title
 * @param {string} [widget.titleColor] - Color class for the title
 * @param {string} [widget.headerAlignment='has-text-left'] - Alignment class for the header
 * @param {string} [widget.contentAlignment='has-text-left'] - Alignment class for the content
 * @param {string} [widget.contentColor] - Color class for the content
 * @param {Object} widget.content - The main content area (AposArea)
 * @param {string} [widget.backgroundColor] - Background color class for the card
 * @param {Object} [widget._mainImage] - Main image attachment data
 * @param {boolean} [widget.useImageRatio=false] - Whether to use image ratio constraints
 * @param {string} [widget.imageRatio='is-4by3'] - Image ratio class when useImageRatio is true
 * @param {Object} [widget._avatar] - Avatar image attachment data for media type cards
 * @param {boolean} [widget.hasFooter] - Whether to show the footer
 * @param {Object} [widget.footerContent] - Footer content area (AposArea)
 * @param {string} [widget.minHeight] - Minimum height class for the card
 * @param {string} [widget.overlayColor='black'] - Color for the overlay
 * @param {string} [widget.overlayOpacity='50%'] - Opacity for the overlay
 * @param {boolean} [widget.showOverlay=false] - Whether to show the overlay
 * @param {boolean} [widget.addFooterBorder=false] - Whether to add a border to the footer
 * @param {('thin'|'medium'|'thick')} [widget.footerBorderWidth='thin'] - Footer border width
 * @param {string} [widget.footerBorderColor='primary'] - Footer border color class
 */

const { widget } = Astro.props;
import AposArea from '@apostrophecms/apostrophe-astro/components/AposArea.astro';

import {
  getAttachmentUrl,
  getAttachmentSrcset,
  getFocalPoint,
  getWidth,
  getHeight
} from '../lib/attachments.js';

const {
  cardType = 'basic',
  cardTitle,
  subtitle,
  titleSize = 'is-4',
  titleColor = '',
  headerAlignment = 'has-text-left',
  contentAlignment = 'has-text-left',
  contentColor = '',
  content,
  backgroundColor = '',
  _mainImage = [],
  useImageRatio = false,
  imageRatio = 'is-4by3',
  _avatar = [],
  hasFooter,
  footerContent,
  minHeight = '',
  overlayColor = 'black',
  overlayOpacity = '50%',
  showOverlay = false,
  addFooterBorder = false,
  footerBorderWidth = 'thin',
  footerBorderColor = 'primary'
} = widget;

const mainImage = _mainImage[0];
const avatar = _avatar[0];

// Dynamic classes for border width and color
const borderWidthClass = addFooterBorder ? `border-${footerBorderWidth}` : '';
const borderColorClass = addFooterBorder ? 'has-border-color' : '';

const cardClasses = [
  'card',
  'mb-6',
  backgroundColor ? `has-background-${backgroundColor}` : '',
  cardType === 'image-overlay' ? 'has-image-overlay' : '',
  minHeight,
  borderWidthClass,
  borderColorClass
]
  .filter(Boolean)
  .join(' ');

const titleClasses = [
  'title',
  titleSize,
  titleColor ? `has-text-${titleColor}` : ''
]
  .filter(Boolean)
  .join(' ');

const subtitleClasses = [
  'subtitle',
  'is-6',
  titleColor ? `has-text-${titleColor}` : ''
]
  .filter(Boolean)
  .join(' ');

const titleWrapperClasses = ['title-wrapper', 'p-2', headerAlignment]
  .filter(Boolean)
  .join(' ');

const contentClasses = [
  'content',
  'p-2',
  contentAlignment,
  contentColor ? `has-text-${contentColor}` : ''
]
  .filter(Boolean)
  .join(' ');

const imageContainerClasses = ['card-image', useImageRatio ? imageRatio : '']
  .filter(Boolean)
  .join(' ');
---

<div class={cardClasses}>
  {
    (cardType === 'image' ||
      cardType === 'image-overlay' ||
      cardType === 'media') && (
      <div class={imageContainerClasses}>
        <figure class='image'>
          {mainImage ? (
            <img
              src={getAttachmentUrl(mainImage, { size: 'full' })}
              srcset={getAttachmentSrcset(mainImage)}
              sizes='(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw'
              alt={mainImage.alt || mainImage.title || 'Card image'}
              width={getWidth(mainImage) || '800'}
              height={getHeight(mainImage) || '600'}
              style={`object-position: ${getFocalPoint(mainImage)}`}
            />
          ) : (
            <img
              src={`https://picsum.photos/800/600`}
              alt='Placeholder image'
              width='800'
              height='600'
            />
          )}
        </figure>

        {/* Add overlay if needed */}
        {(cardType === 'image-overlay' ||
          (cardType === 'image' && showOverlay)) && <div class='overlay' />}

        {/* Overlay content only for 'image-overlay' card type */}
        {cardType === 'image-overlay' && (
          <div class='overlay-content'>
            {cardTitle && (
              <div class={titleWrapperClasses}>
                <p class={titleClasses}>{cardTitle}</p>
                {subtitle && <p class={subtitleClasses}>{subtitle}</p>}
              </div>
            )}
            <div class={contentClasses}>
              <AposArea area={content} />
            </div>
          </div>
        )}
      </div>
    )
  }

  {/* Card content for types other than 'image-overlay' */}
  {
    cardType !== 'image-overlay' && (
      <div class='card-content'>
        {cardType === 'media' && (
          <div class='media'>
            <div class='media-left'>
              <figure class='image is-48x48'>
                {avatar ? (
                  <img
                    src={getAttachmentUrl(avatar, { size: 'one-sixth' })}
                    alt={avatar.alt || avatar.title || 'Profile image'}
                    class='is-rounded'
                    width={getWidth(avatar) || '48'}
                    height={getHeight(avatar) || '48'}
                    style={`object-position: ${getFocalPoint(avatar)}`}
                  />
                ) : (
                  <img
                    src='https://picsum.photos/96/96'
                    alt='Placeholder avatar'
                    class='is-rounded'
                    width='48'
                    height='48'
                  />
                )}
              </figure>
            </div>
            <div class={`media-content ${headerAlignment}`}>
              <p class={titleClasses}>{cardTitle}</p>
              {subtitle && <p class={subtitleClasses}>{subtitle}</p>}
            </div>
          </div>
        )}
        {cardType !== 'media' && cardTitle && (
          <div class={titleWrapperClasses}>
            <p class={titleClasses}>{cardTitle}</p>
            {subtitle && <p class={subtitleClasses}>{subtitle}</p>}
          </div>
        )}
        <div class={contentClasses}>
          <AposArea area={content} />
        </div>
      </div>
    )
  }

  {
    hasFooter && footerContent && (
      <footer class='card-footer p-0'>
        <div class='is-flex-grow-1'>
          <AposArea area={footerContent} />
        </div>
      </footer>
    )
  }
</div>

<style
  define:vars={{
    overlayBackground: `color-mix(in hsl,var(--bulma-${overlayColor}) ${overlayOpacity}, transparent)`,
    footerBorderColor: `var(--bulma-${footerBorderColor})`
  }}
>
  .card {
    height: 100%;
    display: flex;
    flex-direction: column;
    box-shadow: none;
    border: 1px solid rgba(0,0,0,.125);
    border-radius: unset;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .card:hover {
    transform: translateY(-2px);
    box-shadow: var(--card-hover-shadow, 0 4px 8px rgba(0,0,0,0.1));
  }

  .is-small {
    min-height: 200px;
  }
  .is-medium {
    min-height: 300px;
  }
  .is-large {
    min-height: 400px;
  }

  .card-content {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  /* Image handling */
  .card-image {
    flex-shrink: 0;
    position: relative; /* Required for overlay positioning */
  }

  .card-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: unset;
  }

  /* Overlay styling */
  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--overlayBackground);
    z-index: 2;
  }

  /* Overlay content styling */
  .overlay-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 3;
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 1rem;
  }

  .overlay-content .title-wrapper,
  .overlay-content .content {
    width: 100%;
  }

  /* Media layout specifics */
  .media-left .image.is-48x48 {
    height: 48px;
    width: 48px;
    overflow: hidden;
  }

  .media-left img {
    height: 100%;
    width: 100%;
    object-fit: cover;
  }

  /* Footer positioning and borders */
  .card-footer {
    margin-top: auto;
    border-top: none;
  }

  /* Footer borders */
  .has-border-color.border-thin .card-footer {
    border-top: 1px solid var(--footerBorderColor);
  }

  .has-border-color.border-medium .card-footer {
    border-top: 2px solid var(--footerBorderColor);
  }

  .has-border-color.border-thick .card-footer {
    border-top: 3px solid var(--footerBorderColor);
  }

  /* Clean up editor UI */
  :global(.apos-area-widget) {
    margin: 0;
  }
</style>
