---
/**
 * A customizable grid layout widget component for Astro that integrates with ApostropheCMS
 * @component
 * @param {Object} props - Component props
 * @param {Object} props.widget - The widget configuration object from ApostropheCMS
 * @param {string} props.widget._id - Unique identifier for the widget
 * @param {('asideMain'|'mainAside'|'asideTwoMain'|'twoMainAside'|'headerTwoColFooter'|'featuredThreeGrid'|'magazineLayout'|'contentHub'|'galleryMasonry'|'dashboardLayout'|'productShowcase'|'custom')} props.widget.layoutType - The type of layout to render
 * @param {Object} [props.widget.customGrid] - Custom grid configuration when layoutType is 'custom'
 * @param {string} [props.widget.maxWidth] - Maximum width constraint for the layout
 * @param {string} [props.widget.overrideClass] - Additional CSS classes to apply
 * @param {Object} [props.widget.areaStyles] - Custom styling for areas
 */

const { widget } = Astro.props;
const widgetId = widget._id;

import AposArea from '@apostrophecms/apostrophe-astro/components/AposArea.astro';
import { getLayoutAreas } from '../lib/get-layout-areas.js';

// Constants for grid defaults
const GRID_DEFAULTS = {
  COLUMNS: 12,
  GAP: '1rem',
  PADDING: '1rem',
  MARGIN: 'auto',
  MOBILE_GAP: '0.5rem',
  MOBILE_PADDING: '0.5rem'
};

// Basic preset configurations for different layout types
const presetConfigs = {
  asideMain: { rows: 2 },
  mainAside: { rows: 2 },
  asideTwoMain: { rows: 2 },
  twoMainAside: { rows: 2 },
  headerTwoColFooter: { rows: 3 },
  featuredThreeGrid: { rows: 2 },
  magazineLayout: { rows: 2, gap: '1.5rem' },
  contentHub: { rows: 3, gap: '2rem' },
  galleryMasonry: { rows: 3 },
  dashboardLayout: { rows: 3, gap: '1.5rem' },
  productShowcase: { rows: 3, gap: '2rem' }
};

// Helper function to get layout configuration
const getLayoutConfig = (widget) => {
  // Our base configuration that applies to all layouts
  const defaultConfig = {
    columns: GRID_DEFAULTS.COLUMNS,
    gap: GRID_DEFAULTS.GAP,
    padding: GRID_DEFAULTS.PADDING,
    margin: GRID_DEFAULTS.MARGIN,
    mobileGap: GRID_DEFAULTS.MOBILE_GAP,
    mobilePadding: GRID_DEFAULTS.MOBILE_PADDING
  };

  // If we don't have a layout type, return default config
  if (!widget?.layoutType) {
    console.error('Layout type is required for custom layout widget');
    return defaultConfig;
  }

  // For custom layouts, merge with custom settings
  if (widget.layoutType === 'custom') {
    return {
      ...defaultConfig,
      rows: widget.customGrid.rows,
      columns: widget.customGrid.columns,
      gap: widget.customGrid.gap,
      padding: widget.customGrid.padding,
      margin: widget.customGrid.margin
    };
  }

  // For preset layouts, merge with preset config
  return {
    ...defaultConfig,
    ...(presetConfigs[widget.layoutType] || { rows: 1 })
  };
};

// Get the areas and configuration
const areas = getLayoutAreas(widget);
const config = getLayoutConfig(widget);

// Build classes for the layout
const layoutClasses = [
  'custom-layout-widget',
  `custom-layout-widget-${widgetId}`,
  `layout-type-${widget.layoutType}`,
  widget.overrideClass,
  widget.maxWidth
].filter(Boolean).join(' ');
---

<div class="container is-fluid mb-6">
  <div
    id={`custom-layout-widget-${widgetId}`}
    class={layoutClasses}
    data-widget-id={widgetId}
    data-layout-type={widget.layoutType}
    aria-label={`${widget.layoutType} layout section`}
  >
    {areas.map((area) => (
      <div
        class={`custom-layout-area area-${area.name} layout-${widget.layoutType}-${area.name}`}
        data-area-name={area.name}
        style={{
          '--col-start': area.colStart,
          '--col-span': area.colSpan,
          '--row-start': area.rowStart,
          '--row-span': area.rowSpan,
          '--tablet-col-span': area.tabletColSpan,
          '--mobile-col-span': area.mobileColSpan,
          '--align-self': widget.areaStyles?.verticalAlign || 'stretch',
          '--justify-self': widget.areaStyles?.horizontalAlign || 'stretch',
          ...(area.minHeight ? { '--min-height': area.minHeight } : {})
        }}
      >
        <AposArea area={area.content} />
      </div>
    ))}
  </div>
</div>

<style lang="scss" define:vars={{
  columns: config.columns,
  rows: config.rows,
  gap: widget.areaStyles?.gapOverride || config.gap,
  padding: config.padding,
  margin: config.margin
}}>
  @use "bulma/sass/utilities/mixins" as *;

  .custom-layout-widget {
    display: grid;
    grid-template-columns: repeat(var(--columns), 1fr);
    grid-template-rows: repeat(var(--rows), auto);
    gap: var(--gap);
    padding: var(--padding);
    margin: var(--margin);
    height: auto;
  }

  .custom-layout-area {
    grid-column: var(--col-start) / span var(--col-span);
    grid-row: var(--row-start) / span var(--row-span);
    min-height: var(--min-height, auto);
    align-self: var(--align-self, stretch);
    justify-self: var(--justify-self, stretch);
  }

  // For tablet down
  @include touch {
    .custom-layout-widget {
      grid-template-columns: repeat(12, 1fr);
      gap: calc(var(--gap) * 0.75);
    }

    .custom-layout-area {
      grid-column: span var(--tablet-col-span);
    }
  }

  // For mobile
  @include mobile {
    .custom-layout-widget {
      grid-template-columns: 1fr;
      gap: calc(var(--gap) * 0.5);
    }

    .custom-layout-area {
      grid-column: span var(--mobile-col-span);
      grid-row: auto;
    }
  }
</style>

<style is:global>
  /* Layout Preview Styles - Used in widget editor UI */
  .layout-preview-container {
    margin: 0.5rem 0;
  }

  .layout-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 0.2rem;
  }

  .layout-card {
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 0.75rem;
    background: white;
  }

  .layout-title {
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #333;
    font-size: 0.9rem;
  }

  .preview-svg {
    width: 100%;
    height: auto;
    background: white;
  }
</style>