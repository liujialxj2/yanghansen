---
/**
 * Image widget component for ApostropheCMS
 * Renders a responsive image with proper sizing and focal point support.
 * Content editors only need to:
 * - Upload an image
 * - Set alt text
 * - Optionally set a focal point
 *
 * @param {Object} props
 * @param {Object} props.widget - The widget data from ApostropheCMS
 * @returns {astro.AstroComponent} - Rendered image component
 */

import {
  getAttachmentUrl,
  getAttachmentSrcset,
  getFocalPoint,
  getWidth,
  getHeight,
} from "../lib/attachments.js";
import Figure from "../components/Figure.astro";

// 简单的slugify函数，替代ApostropheCMS的实现
function slugify(text) {
  return text
    .toString()
    .toLowerCase()
    .replace(/\s+/g, '-')
    .replace(/[^\w\-]+/g, '')
    .replace(/\-\-+/g, '-')
    .replace(/^-+/, '')
    .replace(/-+$/, '');
}

const { widget, imageOptions } = Astro.props;
const placeholder = widget?.aposPlaceholder;
const image = widget?._image?.[0];

// Handle missing image gracefully
if (!placeholder && !image) {
  console.warn("Image widget: No image or placeholder provided");
}

const src = placeholder
  ? "/images/image-widget-placeholder.jpg"
  : getAttachmentUrl(image);
const srcset = placeholder ? "" : getAttachmentSrcset(image);
const objectPosition = placeholder ? "center center" : getFocalPoint(image);
const alt = image?.alt || "";

// Only add width/height if they exist to prevent layout shift
const width = image ? getWidth(image) : undefined;
const height = image ? getHeight(image) : undefined;
const aspectRatio = width && height ? `${width}/${height}` : undefined;
const imageProps = {
  src,
  alt,
  style: "img-widget__image",
  srcset,
  objectPosition,
  width,
  height,
  aspectRatio,
};
let link = {
  url: widget.linkHref,
  title: widget.linkHrefTitle || widget.caption,
  target: widget.linkTarget,
  rel: null,
};
switch (widget.linkTo) {
  case "none": {
    link = null;
    break;
  }
  case "_url": {
    link.rel = widget.target === "_blank" ? "noopener noreferrer" : null;
    break;
  }
  default: {
    // slugify the linkTo value to reference the widget field.
    const name = "_" + slugify(widget.linkTo);
    const item = widget[name]?.[0];
    link.url = item?._url;
    link.title = widget.linkTitle || item?.title;
    break;
  }
}
---

<Figure
  image={imageProps}
  {link}
  caption={widget.caption}
  style={`img-widget mb-6 ${imageOptions?.additionalClasses || ""}`}
/>
