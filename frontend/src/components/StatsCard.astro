---
// 统计数据卡片组件
// 用于在主页和职业生涯页面展示关键统计数据

import { getLangInfo, formatLocalizedNumber } from '../lib/multilingual';

// 获取组件参数
const {
  statValue,
  statLabel,
  statUnit = "",
  statIcon = "chart-line",
  iconColor = "#E03A3E",
  locale = "zh",
  trend = "", // 添加默认空字符串
  color = "primary", // 添加默认颜色
  animate = true // 新增动画控制参数
} = Astro.props;

// 获取当前语言
const { lang } = getLangInfo(Astro.url);

const formattedValue = formatLocalizedNumber(statValue, locale);

// 趋势箭头方向和颜色
let trendIcon = '';
let trendClass = '';

if (trend === 'up') {
  trendIcon = 'fa-arrow-up';
  trendClass = 'has-text-success';
} else if (trend === 'down') {
  trendIcon = 'fa-arrow-down';
  trendClass = 'has-text-danger';
} else {
  trendIcon = 'fa-arrows-left-right';
  trendClass = 'has-text-grey';
}

// 颜色映射
const colorClass = {
  primary: 'is-primary',
  success: 'has-text-success',
  info: 'has-text-info',
  warning: 'has-text-warning',
  danger: 'has-text-danger'
}[color] || 'is-primary';

// 动画延迟
const animationDelay = Math.random() * 0.5; // 0-0.5s随机延迟
---

<div class={`stat-card ${animate ? 'with-animation' : ''}`} style={animate ? `animation-delay: ${animationDelay}s;` : ''}>
  <div class="stat-icon" style={`color: ${iconColor}; background-color: ${iconColor}20;`}>
    <i class={`fas fa-${statIcon}`}></i>
  </div>
  <div class="stat-content">
    <div class="stat-header">
      <div class="stat-value">
        {formattedValue}
        {statUnit && <span class="stat-unit">{statUnit}</span>}
      </div>
      {trend && (
        <div class={`trend-indicator ${trendClass}`}>
          <i class={`fas ${trendIcon}`}></i>
        </div>
      )}
    </div>
    <div class="stat-label">{statLabel}</div>
  </div>
</div>

<style>
.stat-card {
  background-color: var(--color-bg-light);
  border-radius: 12px;
  padding: 1.5rem;
  display: flex;
  align-items: center;
  gap: 1.5rem;
  height: 100%;
  transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  position: relative;
  overflow: hidden;
}

.stat-card.with-animation {
  opacity: 0;
  transform: translateY(20px);
  animation: fadeInUp 0.6s forwards;
}

.stat-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

.stat-card:hover .stat-icon {
  transform: scale(1.05) rotate(5deg);
}

.stat-card::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 3px;
  background: linear-gradient(to right, var(--color-primary), transparent);
  opacity: 0.7;
}

.stat-icon {
  font-size: 2rem;
  width: 60px;
  height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  flex-shrink: 0;
  transition: transform 0.3s ease;
}

.stat-content {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

.stat-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
}

.stat-value {
  font-family: var(--font-heading);
  font-weight: 800;
  font-size: 2.2rem;
  line-height: 1.1;
  color: var(--color-white);
  margin-bottom: 0.25rem;
  display: flex;
  align-items: baseline;
}

.stat-unit {
  font-size: 1.2rem;
  opacity: 0.8;
  margin-left: 0.25rem;
}

.stat-label {
  color: var(--color-gray);
  font-size: 0.95rem;
}

.trend-indicator {
  font-size: 1.1rem;
  padding: 0.25rem;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.has-text-success {
  color: #23d160;
}

.has-text-danger {
  color: #ff3860;
}

.has-text-grey {
  color: #7a7a7a;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@media screen and (max-width: 768px) {
  .stat-card {
    padding: 1.2rem;
    gap: 1rem;
  }
  
  .stat-icon {
    width: 45px;
    height: 45px;
    font-size: 1.5rem;
  }
  
  .stat-value {
    font-size: 1.75rem;
  }
  
  .stat-label {
    font-size: 0.85rem;
  }
}
</style>

<script>
  // 观察元素进入视口时触发动画
  document.addEventListener('DOMContentLoaded', () => {
    const statCards = document.querySelectorAll('.stat-card.with-animation');
    
    if ('IntersectionObserver' in window) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.style.animationPlayState = 'running';
            observer.unobserve(entry.target);
          }
        });
      }, { threshold: 0.2 });
      
      statCards.forEach(card => {
        card.style.animationPlayState = 'paused';
        observer.observe(card);
      });
    } else {
      // 降级方案：不支持IntersectionObserver的浏览器直接显示
      statCards.forEach(card => {
        card.style.opacity = 1;
        card.style.transform = 'translateY(0)';
      });
    }
  });
</script> 