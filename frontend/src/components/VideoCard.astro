---
import { formatImageUrl } from '../lib/apos';
import { t } from "i18next";
import dayjs from 'dayjs';

// 定义接口类型
interface Props {
  video: {
    _id: string;
    title: string;
    _url: string;
    videoUrl: string;
    duration: string;
    recordDate: string;
    category: string;
    description?: string;
    _thumbnail?: any;
  };
}

// 获取视频数据
const { video } = Astro.props;

// 准备缩略图URL
const thumbnailUrl = video._thumbnail ? 
  formatImageUrl(video._thumbnail) : 
  'https://via.placeholder.com/640x360';

// 获取视频类别的本地化名称
const getCategoryLabel = (category) => {
  const categoryMap = {
    'highlights': t('videos.categories.highlights'),
    'interviews': t('videos.categories.interviews'),
    'training': t('videos.categories.training'),
    'behindScenes': t('videos.categories.behindScenes')
  };
  return categoryMap[category] || category;
};
---

<div class="video-card">
  <div class="card">
    <div class="card-image">
      <figure class="image is-16by9">
        <img src={thumbnailUrl} alt={video.title}>
        <div class="play-button">
          <span class="icon is-large">
            <i class="fas fa-play-circle"></i>
          </span>
        </div>
        {video.duration && (
          <div class="video-duration">{video.duration}</div>
        )}
      </figure>
    </div>
    <div class="card-content">
      <div class="video-meta">
        <span class="video-category">{getCategoryLabel(video.category)}</span>
        {video.recordDate && (
          <span class="video-date">{dayjs(video.recordDate).format('YYYY.MM.DD')}</span>
        )}
      </div>
      <h3 class="video-title">
        <a href={video._url}>{video.title}</a>
      </h3>
      {video.description && (
        <p class="video-description">{video.description}</p>
      )}
    </div>
    <footer class="card-footer">
      <a href={video._url} class="card-footer-item">
        {t("videos.watchNow")}
        <span class="icon"><i class="fas fa-chevron-right"></i></span>
      </a>
    </footer>
  </div>
</div>

<style>
  .video-card .card {
    height: 100%;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .video-card .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0,0,0,0.2);
  }
  
  .card-image {
    position: relative;
  }
  
  .play-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    opacity: 0.8;
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
  
  .play-button .icon {
    font-size: 3rem;
  }
  
  .video-card .card:hover .play-button {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1.1);
  }
  
  .video-duration {
    position: absolute;
    bottom: 10px;
    right: 10px;
    background-color: rgba(0,0,0,0.7);
    color: white;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 0.8rem;
  }
  
  .video-meta {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
    font-size: 0.85rem;
  }
  
  .video-category {
    color: #E03A3E;
    font-weight: 500;
  }
  
  .video-date {
    color: #888;
  }
  
  .video-title {
    font-size: 1.2rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    line-height: 1.4;
  }
  
  .video-title a {
    color: inherit;
    transition: color 0.2s ease;
  }
  
  .video-title a:hover {
    color: #E03A3E;
  }
  
  .video-description {
    color: #666;
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .card-content {
    flex-grow: 1;
  }
  
  .card-footer-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .card-footer-item:hover {
    background-color: rgba(224, 58, 62, 0.1);
    color: #E03A3E;
  }
</style>