---
import AposArea from '@apostrophecms/apostrophe-astro/components/AposArea.astro';
import {
  getAttachmentUrl,
  getAttachmentSrcset,
  getFocalPoint,
  getWidth,
  getHeight
} from '../../lib/attachments.js';
import ArticlesFilter from '../../components/ArticlesFilter.astro';

const {
  pieces,
  showImage = true,
  imageWidth = 4,
  showAuthorAvatar = true,
  excerptLength
} = Astro.props;
const textWidth = showImage ? 12 - imageWidth : 12;

const currentCategory = Astro.url.searchParams.get('category') || '';
---

<div class='container'>
  <ArticlesFilter
    currentUrl={Astro.url}
    currentCategory={currentCategory}
    articles={pieces}
  />
  <div class='content'>
    {
      pieces.map((article) => {
        const heroImage = article?._heroImage?.[0];
        return (
          <article class='mb-6 pb-6 border-bottom'>
            <div class='columns is-vcentered'>
              <div class={`column is-${textWidth}`}>
                <a href={article._url}>
                  <h2 class='title is-3'>{article.title}</h2>
                </a>
                <div class='author-info mb-3'>
                  <div class='media'>
                    {showAuthorAvatar && article._author[0]?.profileImage && (
                      <div class='media-left'>
                        <figure class='image is-32x32'>
                          <AposArea
                            area={article._author[0].profileImage}
                            imageOptions={{
                              additionalClasses: 'is-rounded object-fit-cover',
                              sizes: '32px'
                            }}
                          />
                        </figure>
                      </div>
                    )}
                    <div class='media-content'>
                      <p class='has-text-grey'>
                        By <strong>{article._author[0].title}</strong> |
                        {new Date(article.publishDate).toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                </div>
                <p class='mb-4'>
                  {excerptLength
                    ? article.excerpt.slice(0, excerptLength) +
                      (article.excerpt.length > excerptLength ? '...' : '')
                    : article.excerpt}
                </p>
                <a href={article._url} class='button is-link'>
                  Read Full Article
                </a>
              </div>
              {showImage && heroImage && (
                <div class={`column is-${imageWidth}`}>
                  <figure class='image is-3by2'>
                    <img
                      class='has-shadow object-fit-cover'
                      loading='lazy'
                      decoding='async'
                      width={getWidth(heroImage) || '570'}
                      height={getHeight(heroImage) || '380'}
                      sizes={`(max-width: 768px) 100vw, ${(imageWidth / 12) * 100}vw`}
                      src={getAttachmentUrl(heroImage, { size: 'full' })}
                      srcset={getAttachmentSrcset(heroImage)}
                      alt={heroImage.alt || ''}
                      style={`object-position: ${getFocalPoint(heroImage)}`}
                    />
                  </figure>
                </div>
              )}
            </div>
          </article>
        );
      })
    }
  </div>
</div>
<style>
  /* Add these styles to fix image fitting */
  .image img {
    object-fit: cover;
    width: 100%;
    height: 100%;
  }
  .is-rounded {
    border-radius: 50%;
  }
  .has-shadow {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
</style>
